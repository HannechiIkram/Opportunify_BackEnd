// applicationController.js

const express = require("express");

const Application = require("../models/application"); // Corrected import statement

// la recherche de tous les applications
///samar
async function getall(req, res) {
  try {
    const user = req.user;
    if (!user) {
      return res.status(401).json({ error: 'Unauthorized - User not logged in' });
    }

    const data = await Application.find();
    res.send(data);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

// la recherche par id
async function getbyid(req, res) {
  try {
    const data = await Application.findById(req.params.id); // Corrected usage of Application model
    res.send(data);
  } catch (err) {
    res.send(err);
  }
}

// l'ajout d'une application
async function add(req, res, next) {
  try {
    const newApplication = new Application(req.body); 
    await newApplication.save();
    res.status(200).send({ message: 'Application added successfully' });
  } catch (err) {
    console.error(err); 
    res.status(500).send({ error: 'Internal Server Error' });
  }
}
async function getById(req, res) {
  try {
    const application = await Application.findById(req.params.id);
    if (!application) {
      return res.status(404).send({ error: 'Application not found' });
    }
    res.send(application);
  } catch (err) {
    console.error(err);
    res.status(500).send({ error: 'Internal Server Error' });
  }
}
async function acceptApplication(req, res) {
  try {
      const { id } = req.params;
      const updatedApplication = await Application.findByIdAndUpdate(id, { accepted: true, rejected: false }, { new: true });
      if (!updatedApplication) {
          return res.status(404).json({ error: 'Application not found' });
      }
      res.status(200).json(updatedApplication);
  } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'Internal Server Error' });
  }
}

// Mettre Ã  jour une application pour la refuser
async function rejectApplication(req, res) {
  try {
      const { id } = req.params;
      const updatedApplication = await Application.findByIdAndUpdate(id, { accepted: false, rejected: true }, { new: true });
      if (!updatedApplication) {
          return res.status(404).json({ error: 'Application not found' });
      }
      res.status(200).json(updatedApplication);
  } catch (err) {
      console.error(err);
      res.status(500).json({ error: 'Internal Server Error' });
  }
}

module.exports = { getall, add , getbyid, getById , acceptApplication, rejectApplication };